### [[3.2: Difference between Application and Operational code]]

Is there a difference between Logic that is written for Operations automation and Logic that is written for non-Operations?

In my opinion, there is, and it is a big difference.  It doesn't need to exist, but it does exist, and they are not mildly different, but extremely different, at present.

I see this changing more in the future, as distributed programming environments not only become normal, as they are are now, but that we start to get generational levels of experience in the field.

I will call non-Operational Logic "Application Logic", even though it may not strictly fit your definition of what an Application is, since it changes under different contexts.

For instance, in a Production web serving environment, you frequently have "Application Servers" which might run Java Tomcat, JBoss, or Ruby of Rails, or a Python, or other Logic required for producing dynamic web content.

These would be "Application" Logic in the terminology as I'm using it.

So, what is the difference between Application Logic and Operational Logic?

The main difference is Resiliency, and this has a number of parts to it.  For instance:

- Application Logic requires that the environment that it runs in be configured, or the Logic will fail, and often will fall non-gracefully.  How gracefully it fails generally has to do with how "mature" the Logic is, in terms of it's life cycle.

- 