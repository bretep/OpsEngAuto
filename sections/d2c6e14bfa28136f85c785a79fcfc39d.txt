### [[3.3.2: Creating Axioms from Axes]]

This will be one of the few places in the book that I use an external definition to help us get more clarity.  I used to always lead with dictionary definitions and quotes for things and I still am a fan of both these things, but if I am writing a book about how to think about things and evaluate them for yourself, it doesn't help to constantly source external material as an authority.

So accordingly to the greatest authority that was easily accessible on my phone as I wrote this, there are generally two types of Axioms.  Logical Axioms and Non-Logical Axioms.

Logical Axioms are where you say something so simple and concise, that it couldn't possible by disagreed with.

This might be something like:

"If Availability of your Production Operations is your top priority, you need to have a validation step before making a change to determine if the change will cause down-time or Unavailability."

This borders on a tautology, and that is OK, because it is being specific, and has utility.

Is "Availability" our Top Priority for our Production Environment?  If so, then we need to validate that a change to the Production Environment won't cause a problem with our Availability.   BAM!  Axiom!

Not the most useful axiom, until one doesn't implicitly follow it, and causes an outage, and then a New Policy is created:  Validate the change against the existing Production Environment, and determine the level of Risk, and then test it against a Staging Environment to ensure it works there, before implementing in Production.

This is a Policy, that creates a Procedure, that stems from the explicit axiom, with a historical background of the outage event in question as it's inspiration.

So, we have "simple statements no one should be able to disagree with" as one type of Axiom.  It is important that these statements are very explicit and detailed, or the generality of the statement will make it not true in some circumstances.

For instance, I lead that axiom with "If Availability of your Production Operations is your top priority", because this set's both a Priority and a fairly specific range in the spectrum or axis of Availability that it will be "Highly Available" or more towards Available on the scale of:

Not Available  <--->  Available

Now let's look at the Non-Logical Axiom, which is defined as something that can't be proved by simply thinking about the assertion as being true or not true, but fit's into set of rules such as the commutative property of Arithmetic:

a + b == b + a

Things are able to be moved around from being first to being second, with the same results.  This only works, for some operations, not others.   For instance:

a / b == b / a

This is generally not a true statement, so cannot be an axiom, because unless "a" and "b" are both 1, then the different sides of the equation will have different values.

But, this is only for the general rules of Arithmetic.  We could create our own usage of the symbols "/" and "==" and define them to mean something else, then this could mean anything we want.  However, because these symbols have an established use, and would generally be read with that use, this would probably be a bad idea.

Regardless, the point is that Non-Logical Axioms fit into a system, and they should be seen, understood and used in the context of that system.

We will be using both kinds of Axioms.

What we have been leading up to is mostly being able to build Logical Axioms, by taking our specific Attribute Axes, and the values we have assigned them, we can create Axioms.

By using the Prioritization of our Attribute Axes values, we can make other Logical Axioms (that deal with Priority).

We can also make Non-Logical Axioms by coming up with a system for how to discuss and compare the different things we are working on.  We can turn the Logical Axioms into variables, and create formulas out of them to determine what is a Logical course of action.

We can also create Non-Logical Axioms once we start building these formulas, as we can decide how things can be treated inside the algorithm to express different ideas, and get different results.

To go back to Philosophy, these elements are part of the Philosophy of Mathematics.  These do not need to be strictly used in an academic or strictly used in standard methods of statical analysis, but can be used in any circumstance, given that we have put sufficient thought and detail so that they can be used discretely and deterministically.
