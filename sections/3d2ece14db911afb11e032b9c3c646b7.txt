### [[2.6.8: Humans]]

It feels a bit weird when I say or write "Humans", as it's strangely impersonalizing to everyone, I feel.  However, it is conveniently clear to differentiate not only from "Not Human", or "Logic Based" or "Software" or whatever, but also clear in the sense that I am not speaking casually about people, but specifically about the type of effects that Humans cause.

We generalize about "people" all the time, different groups of them, to have any sort of discussion.  Sentences can only carry so much information in them at any given time, because words only have so much meaning, and a word is composed of syllables, and those take time to write or say, and they have to be done sequentially: the syllables cannot be written or said simultaneously to be more efficient, and so generalizing or summarization is required.

Without summarization and generalization, we would spend so much time getting to the point, by being maximally explicit in every detail, much in the way I am doing right now, that we would just not get to the point, and all communication would cease to function.

Shouldn't there be a spectrum for this?  Let's make one:

Generalization  <----->  Specificity

Now we have an axis on which we can slide a variable across, to be more or less specific, and it can be tuned in the way we want it, for every circumstance that is possible.

In addition to this, we can add in another topic we recently covered, such as "Atomicity".

We can be extremely specific in our discussion of Atomicity, or we can be extremely General, or somewhere in between, in the spectrum, along the axis.  I will use this method of multiple examples mixed together to provide a richer tapestry for these ideas to be expressed in, as the book goes on.  These are tools for communicating more deeply; they are another spectrum or axis, which our goals can be applied against.

Let's just combine some right now, and make a new communication tool.  We just discussed "Atomicity" as a topic, on the spectrum/axis of Generalization <--> Specificity.  Let's combine the Atomicity spectrum and the Specificity spectrum together, and create a topic based on the two dimensional coordinate system that those two axes create.

Atomicity:  Atomic <---> Not Atomic
Specificity:  Specific <---> General

I ended up writing these "Left to Right" in terms of the subject being in a full-state, or an empty-state, but they could just as easily be written "Right to Left" (in reverse order), if it is more convenient for the problem at hand to see them in that way.  This process of ordering things as needed for the current problem is another tool that can be applied, and which has properties that can be evaluated.  For the sake of keeping up a fluid pacing for this book, I can't go into detail on each of these things as they arrive (even though I would like to: enhance, enhance, enhance).

Now that we have these two axes, which we could use in the Cartesian coordinate system, we can plot a point on it, and then create text that describes that point.  This is a sort of generative tool, in which one can use one's knowledge of an information space to generate any amount of specific data.

If you are familiar with any sort of procedural generation, this yields the same kind of effect that Perlin Noise allowed in procedural generation, in that because the pattern remained consistent whether viewed from "from away" or "up close", procedurally generated content (images, models, clouds, cities, whatever) could scale to "infinite" detail, either looking at the "big picture" or with a magnifying glass.

In the same way, this generative tool of mapping axes to an information space, and then using your own understanding of that space to extrapolate what text would describe that point in those axes' space.  

This is actually the exact same technique I am using to write this book, as I have broken up the information space I am trying to cover into both a linear (sequential) flow (chapters), and then assigning various variables (in the forms of words in the topics) to create each chapter's text.

Let's do one of these now:

For the Atomicity value, let's say on a scale of 1.0 (Atomic) to 0.0 (Not Atomic), we have an Atomicity value of 0.25, or not very Atomic, but having some Atomic characterics.  

Then let's say on the Specificity scale of 1.0 (Specific) to 0.0 (General), we have an Specificity value of 0.75, or fairly specific.

Because we need to be specific, I am going to make up some details about the Atomicity of the thing in question, which I will use a database for:

{{ start_quote }}
This database provides limited atomic transactions.  Transactions are accepted, and written into a journal file, which is flushed to disk periodically, but not in sync with the transaction being written, for performance.  The means that in certain circumstances a transaction may be partially written onto the disk.
{{ end_quote }}

So, this terrible database accepts things as Transactions, and journals the transactions, but it doesn't flush the journal Atomically, so you might have partial transactions on the disk.  This is actually always potentially true, since a power failure could cause a partial transfer, in some hardware configurations.

In practice, modern controllers accept a queue of IO requests, and can do some optimizations on them, depending on the construction of the storage medium (what type of disk/etc), and so flushing merely pushes more things onto this queue, and if you cant put more things into the queue, you have already maxed out your throughput in this configuration.

In this case, it is possible that the queue can take more total IO requests if they are batched, and for a given workload and hardware specification, you may need to do this.  Moving on.


What if we had a Specific value of 0.0, instead of 0.75?

In this case we would be 100% Generic, but we still have to say something relevant so we might summarize:

{{ start_quote }}
This database handles requests in Transactions, and writes them to a journal file, but flushes only periodically, so Transactions may be lost on power failure.
{{ end_quote }}

This gets across the idea of what's going on, but is very brief about it.

What if we had a Specific value of 1.0, instead of 0.75?

We would have to specify the entire code, every line, and it would need to be idealistically correct (or actual implementation), and we would have to specify all environment requirements.  Why?  Because we are 100% Specificity at 1.0.  This means absolutely everything must be specified, if this spectrum or axis is to have real meaning.

Taking this into account, maybe my example using 0.75 for that level of specificity isn't nearly detailed or specific enough, but on first introduction 0.75 sounds like "pretty specific", where 0.5 sounds "half specific, half vague", and I wanted to be detailed enough to get real implementation points across, but also not too long for pacing.  Only after thinking about what 100% Specificity would really mean does 0.75 seem too high.  

This is yet another tool for performing evaluations, by making one example, and rating it, and then making another (or a series of others) example, and rating that, and going back and re-rating the first example, then the second again, and finally creating examples of the most extreme situation you can imagine at both ends of the spectrum (being 0.0 and 1.0), and then re-evaluating the middle ones again.  This is a method for getting a numerical sense of an information space.

So, these are 2 more tools we can use in the future to discuss problems in a clear and precise manner.  Trying to get as close as we can to 1.0 specificity, without losing the ability to make progress.

But where we're we?  Oh, yes!  Humans!

When we are having conversations like the one we are sort-of currently involved in, being specific by saying "Humans" instead of any other word allows us to understand we are using technical jargon, and we mean technical things.

This allows us to move away from our standard social communication style, and into a technical communication style, to discuss technical points at a detailed level.

So while it is weird to type and say, it has a benefit for clarity, which is an important attribute of Engineering.

Also, it will make it easier to relate to your future AI overlords, which will be helpful.  ("The humans are revolting!", "I know, right?")

