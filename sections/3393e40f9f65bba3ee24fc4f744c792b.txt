### [[2.5.4: Distributed: dealing with N nodes]]

You may have used the word "distributed" before, such as in "distributed systems".

My meaning will be very similar to this usage, but I will use it a little more generally to mean any time you need to work across many nodes of something.

For instance having to control 200 web servers will be a Distributed service of web servers.

This usage stems from a single web server being able to do the same thing as 200 web servers (configured in the same manner), but the "load" is "distributed" across the 200 web servers, making this a distributed network service.

The reason for being very general in this usage is that it provides a comparison point between single-unit processing system and a multi-unit processing system, which is the core of the problem and benefit: there are more things doing the thing.

As I will cover in more detail later on, there are 3 cases you should account for in operations:

- Zero instances of something.  You do not do this thing.  In some cases this is simply something you do not require, but in the more sophisticated case, this is work you are still accomplishing, but in a manner that does not need an instance of anything running to accomplish the goal, it is taken care of by an efficiency gain.  In either case, it is important to know that "not having something" is a potential state.

- One instance of something.  This is when you have one thing that you use; it is the centralization of a service.  There may still be a pair of machines (Master/Slave) supporting this one-thing, and there may be more than a pair, but if there is logically a "single instance" of the thing, then it is a "one instance" though the instance may be made up of many pieces.

- Infinite instances of something.  As soon as you move beyond "one instance", you move into the realm of many-things.  If you think you can move to "just two" or "just three" you are not taking into account all of history which shows continual sub-division and growth in all things that are not "shutting down".  "infinite instances" may currently be at a count of "2", but in order to handle the growth that will eventually come, it should be implemented as an N-instance, or infinite instance system.

These differentiates can be seen in the phase:

"0, 1, Infinity.  There is no 2."

Make this an internal meme for yourself, and watch as things start to make more sense in terms of problems with scaling.  When a number larger than 1-instance is introduced, you will eventually see that number grow, and sub-divide into different domains.

Having a 1-instance system is incredibly difficult.  Pressures will continually be applied to grow into an N-system, and it will take work and perseverance to keep a 1-instance system at 1-instance.

0-instance systems, when not just the identity of "we don't do that here", come from efficiencies.  This is when a 1-instance or N-instance system has been replaced in such a way that the work does not need to specifically occur, and yet the goals are still achieved.  If this sounds a lot like what I referred to as "removing Classes of Work", it is because it is exactly that.

I will cover this concept in full detail later on, because it is critical to understanding how scaling works in practice.

