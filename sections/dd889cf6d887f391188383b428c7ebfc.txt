### [[2.5.5.3.2.1: However, between Data and Logic is a huge gap, as Data is "perfectly" understandable, while Logic is not, due to Halting Problems and all other things CS-academia knows and describes very well.]]

Another Unknowable Virtual thing is Logic.

Logic, as we defined earlier, is an all-emcompassing term for anything to do with software or decisions, or scripts or other methods of manipulating data, executing statements, etc.

One of the famous problems of computer science is the Halting Problem.

This problem is essentially that is impossible to know if a program is every going to stop executing once it starts.  There is a lot of information about this problem out there, so we will just leave it with that description and realize that Logic has an Unknowable Virtual element to it.

However, Logic also has many Knowable Virtual elements to it, because as in our example of "X = 5", this is a statement that can be made in Logic.

Additionally, just like in our example we can use the Logic itself to inspect this, or we can externally inspect the Logic using a debugger, and we can verify the data, and it is Knowlable Virtual Data.

So, while Logic contains some properties that are Unknowable (the halting problem being one example), it also contains properties that are Knowable, and the Unknowable does not stop us or hinder us in any way from gaining full access to the Knowable.  

This puts Logic in a murky place on a spectrum of Knowlable to Unknowable, but that's OK!

What we need to do in this instance is simple break up what Logic is, and look at each of the components on the spectrum, and we will have a correct view into it.

So, that would look like:

- Logic: Will it ever stop running?  On the Unknowable part of the spectrum.
- Logic: Variables and other values?  On the Knowable part of the spectrum.

I leave off calling them directly Knowable and Unknowable, because Logic can be tricky, and there can be tricky things done inside logic, and perhaps in some circumstances this means that variables are not completely knowable, and there might be circumstances where we have a high confidence that a program will halt, like this pseudo-code:

{{ start_code }}
main()
{
  return 1;
}
{{ end_code }}

We can be reasonably sure that if this program compiles, and there are not problems with dynamically linked libraries, and there are not somehow crazy macros in the white space or brackets, that this program will eventually stop running.

This tells us another Knowable property of Logic, which is that it is very complex, and can have obscured meaning.

Take for example this Python code snippet which uses a Decorator.  It's OK if you don't know Python or aren't familiar with Decorators, because it's just an example and I'll explain my meaning of it.

{{ start_code }}
@SomethingSomething
def DoSomething():
  print 'Hello world!'
{{ end_code }}

If the "@SomethingSomething" wasn't there, this would read like a beginning Hello World! program, as when you call the DoSomething() function, it says it will print out "Hello World!".

However, there is a Decorator to this function call "SomethingSomething", which modifies the behavior.  The decorator code may live in another file, so it may not be obvious what is happening when you simply look at the code.  You assume it's basically going to print out "Hello World!".

