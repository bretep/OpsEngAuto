### [[2.5.5.3.2: Can know everything about Virtual (Logic/Data), because they are limited, and they are fully contained and inspectable.]]

In the last section we learned that there are things we cannot know, or know with full accuracy about Real things.  Their very nature means that they are not fully knowable, but we can know enough about them to make use of them effectively, and have a long history of doing so.

How do Virtual things align on this same spectrum of "knowability"?

Some Virtual things can be completely known.  Other Virtual things remain unknowable.

We can use the examples we used in a previous chapter.

Let's look at a variable that we assign:

X = 5

Here, I have made X to be equal to 5.  Can we know everything about this Virtual thing?

Yes, we can.

We can inspect this in any way we like, and know everything to know about it.  We can compare it to different numbers:  X < 6, X > 4, X == 10, and see if it is similar to them.  

Any operation we wish to make, we can perform and know the full extent of what there is to know about this Data.

Now, let's look at a Virtual thing that is not fully knowable, we will look at the word and symbol of "idea".

We can take the word "idea" and trace it's language roots, and compare it to other languages, and find common usage of it in popular literature, and we can ask people what it means, and in all of these things we will gain information.

But, we will never know everything there is to know about the word and symbol of "idea" because it is not a concrete thing.  It has subjectivity and flexibility, and can be used in different ways in different circumstances.

The same is true for many things.  So we have a class of Virtual things about which anything can be completely known, and another class of Virtual things about which only some things can be known.

Let's simplify this into two more terms:  Knowable Virtual things, and Unknowable Virtual things.

We could call this "Knowable Virtual Data", but since Data is a subset of Virtual, and there exists other things that are virtual, and may be completely Knowable, that do not meet the same definition as Data, we will use the label "Knowable Virtual" and then can append anything onto it afterwards, like Data, to describe what exactly the Knowlable Virtual thing is.

Let's create a spectrum for these labels:

Knowable Virtual thing <---> Unknowable Virtual thing

We're going to build a little forest of terms and spectrums (or axes) over the course of the book, because once we have clear terms like this, we can use them in different ways than if they were still more vague, and less specific.  Once they are specific, they become tools, which we can use to help us perform work.

We create a language tool when we give terms specific properties, which allow us to clearly divide information, such as Knowable Virtual Data vs. Unknowable Virtual Data.  We have at least 1 property between these information topics that we can use in any algorithm as something that is clearly understood: knowability.

Over time we will build up a toolset of these, so that we can communicate about incredibly complicated topics, and reason about them efficiently and clearly.

As an exercise, try to come up with some of your own terms.  Once you have an understanding of how to create terms for yourself, 

If you can, great, write them down and add more to that list as you think of more, and it will start your own set of terminology in which you can reason with, having more understanding of it than my terminology, which I have created.

If you can't think of any now, that's not a problem, but if any come to mind in the future, write them down, and over time more and more may start to come to you.

