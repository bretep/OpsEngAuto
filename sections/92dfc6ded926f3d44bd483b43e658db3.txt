### [[3.8: Axiomatic Engineering.  My method for making decisions that are not personal, even though of course they are my personal understand and information matching to the algorithm.  Present a method for discussing engineering in this manner..]]

We've been building up to this for a while, introducing different spectrums or axes for different Attributes of this or that, but do they fit into a system?  They do!  And I call this "Axiomatic Engineering", which is like working with mathematical Axioms, to create engineering solutions.

In this way we can detail all of the Attributes that we would like, and specify the spectrums (or axes) of those attributes, and then assign values to each attribute axes that we would like.

Do we want more Consistency or less Consistency?  Do we want more Availability or less Availability?

Between Consistency and Availability, which is higher priority?  What sorts of trade-offs need to be made if we were to rate Consistency higher than Availability?  What about Available over Consistency?

We can't possible implement the same solution while matching our different axes values, and priorities, because we care about different things in each circumstance, and so we will create a different solution.

This is important in your own work, and critical for working in a team.  If you can't agree on your values, how will your work have the Alignment necessary to produce the effects you want with efficient use of your resources?

Let's re-iterate my generic definition for Engineering again:

 "The efficient use of resources applied in an environment, to yield a desired effect."

So we have:

- Some environment (Production)
- Resources (time, people, hardware, money)
- Effects (Availability, Consistency, Resiliency, Atomicity, etc)

These are the fundamental elements of Production Operations Engineering, and how we mix and match them together, and the methods of their implementation, will determine the effects that we get.

If we are being Pragmatic, and we are only concerned with the effects, then we can start to build an "Effect Estimating Machine", and this is done through Axioms, created by populating our Axes with values and prioritizing which of those values are more important to us than others.

Let's make an overview for all of services in the Production Environment:

- Available.  Our services must be available.

- Performant.  Our services must be fast enough for our purposes (poor performance under heavy load means that some percentage of our end-users will not have Availability).

- Manageable.  We need to be able to control our environment, deploy software, upgrade security flaws, making configuration changes, add or replace server nodes, control user access, etc.

- Visible.  We need insight into our system through monitoring, alerts, logs, etc.  We can't manage things if we don't know what is going on.

That's a pretty good start, so let's take this as our basis.

I have also ordered them in a general order of priority, because:

- If the services are not Available, what is the point of it existing?

- If the services are not Performant, then they are not available to some end-users, or are not timely.

- If they are not Manageable, then we cannot control them to keep them Available and Performant.

- If they are not Visible, we cannot efficiently Manage them.

We could add other elements in here, or split these up, and some circumstances might order them differently, but this is a good starting place for our purposes.

