### [[2.5.1: Logic: code]]

I'm going to try to constrain myself to using the capitalized (proper noun) "Logic" any time I am referring any of the following things:

- Code
- Programming
- Scripts
- Decision trees
- Finite State Machine processes
- etc

I will also use these other terms in their normal meanings throughout the book, but I will refer to Logic when I am combining what is created in order to manage things that are done programmatically.

It's good that our industry has many terms for things, as it makes them specific, but I will using the roll-up term, Logic, in order to simplify and generalize what we are talking about.

Logic is used when one wants to operate on data in a digital environment.  With Logic we will change the data, create new data, validate data, and perform side-effect type actions where we do things like copy data to different locations, remove it, create directories, start and stop services, as well as anything else we could do manually.

Essentially Logic is the way we take action through digital means, where we would otherwise take actions manually.

Of course, in a digital environment, all actions eventually require logic.

If I am in a command-line shell, and I run a command to create a directory, I have manually initiated Logic to perform this work.

If I write logic to inspect a data source, and then to create directories based on that data in that source, then I do not need to manually initiate the Logic to create the directory.  There will be some kind of timed period (ex: cron jobs) or event (ex: monitoring initiated execution) that will initiate the Logic.

