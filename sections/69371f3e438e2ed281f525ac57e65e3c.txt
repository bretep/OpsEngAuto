### [[2.5.1: Logic: code]]

I'm going to try to constrain myself to using the capitalized (proper noun) "Logic" any time I am referring any of the following things:

- Code
- Programming
- Scripts
- Decision trees
- Finite State Machine processes
- etc

I will also use these other terms in their normal meanings throughout the book, but I will refer to Logic when I am combining what is created in order to manage things that are done programmatically.

It's good that our industry has many terms for things, as it makes them specific, but I will using the roll-up term, Logic, in order to simplify and generalize what we are talking about.

One simple definition could be:

- Logic is Data that is executable.

This could because it is in a native format an Operating System can load and execute (ex: ELF, EXE, etc) or via an interpreter (ex: Python, Ruby, Bash).

Logic is used when one wants to operate on data in a digital environment.  With Logic we will change the data, create new data, validate data, and perform side-effect type actions where we do things like copy data to different locations, remove it, create directories, start and stop services, as well as anything else we could do manually.

Essentially Logic is the way we take action through digital means, where we would otherwise take actions manually.

Of course, in a digital environment, all actions eventually require logic.

If I am in a command-line shell, and I run a command to create a directory, I have manually initiated Logic to perform this work.

If I write logic to inspect a data source, and then to create directories based on that data in that source, then I do not need to manually initiate the Logic to create the directory.  There will be some kind of timed period (ex: cron jobs) or event (ex: monitoring initiated execution) that will initiate the Logic.

As we went over in {{ section_ff17d94c0d49aab3e372e47b64b96ea7 }}, Logic is un-real or virtual.  It is not a physical thing, with physical properties.  It does not exist in the physical world at a given location or orientation.

One can say that that bits that describe the Logic do reside on a physical storage medium (rotating disk, SSD, RAM, etc), but I am separating these physical attributes from the Logic itself, which could be anywhere, and in a given physical device, it will almost always reside in multiple locations, both on storage, and in RAM and perhaps in a CPU cache, and perhaps partially in CPU registers.

I will end up breaking down many things to Logic layers and Data layers, and how Logic works on Data, and how Data is the stable foundation of Logic.  In my perspective, this is a reversal of how many people see the relationship between Logic and Data, but I will make a case for why Data is the core and Logic is the shell.

To make the assertion as briefly as I can:

1. Data is what you know at a given time.  This is useful forever.  It could be useful hundreds of years for now, for the same reasons it is for us today (using it to configure things), or strictly for historical or analytical purposes.  Data has essentially no "death" or time where it becomes invalid or unusable, as a general resource.  

Not to say Data cannot be corrupted, or be invalid to our purposes, but it remains valid as a source of information even if it is corrupted (though perhaps not actionable for our immediate use).

2. Logic is the codification of goals.  What we want to occur is processed through Logic.  Because of this, Logic has a number of environmental factors that work in some conditions, but there are many states where Logic cannot be used, except if it is seen as "Data" and is no longer executable.

Logic requires a valid environment to run on.  Logic created to run on Linux will not run on Windows, or OS X, without being re-compiled, or being somehow universally compiled.

Logic expects certain environmental requirements to exist.  It may expect to run in a certain directory structure, which contains certain files, formatted a certain way, and containing specifically formatted data.

Or Logic could require access to network services which must exist for it to properly work.  

Logic has dependencies.  It runs on a given "platform", and does not run on other platforms.

Data needs a place to reside (ex: database, file system, etc), but it does not require a specific environment, it could be stored in a YAML format, JSON format, in a relational database, a flat file with comma or colon separation, or any type of format or storage system at all.

The methods to access the Data will change, but the Data itself can remain the same.

