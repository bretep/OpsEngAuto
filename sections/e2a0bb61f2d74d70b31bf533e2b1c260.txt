### [[2.5.6: Class of Work: a specific type of work that is done, may be domain specific or general across the company]]

We briefly defined Class of Work in the beginning of the book, but let's take a slightly deeper look at what it means.

Initially I just said it was "anything that is done", and this is true but perhaps "work" work suffice to say that, and everyone would understand.  However, there is more depth we can gain from looking at it deeper.

I initially used the example of automating the DNS zone file updating.  If you aren't familiar with DNS zone files, they are text files look like this:

{{ example_dns_zone_file }}

One aspect of manual workflow generally goes:

- A new host is created, and needs a name matched to it's IP address (an address "A" record)

- Someone goes to the server that hosts the DNS Master files (the host people use to make edits on, and where the changes will be disseminated)

- They add the line with the hostname fragment, and the "A" for address record, and the IP address

- They update the serial number of the zone file (so the DNS software knows the file has been changed)

- They test the file with the DNS software's configuration file validation

- If the test passes, they reload the DNS zone file into the server

- Then they tell the Slave DNS servers (other machines that reference this Master machine's DNS service to get records), and tell them to do a zone transfer.  This might also be configured to happen automatically on the Zone file being reloaded, through the Master DNS server's software


These steps might take a person 10-15 minutes to perform, on an individual basis, and slightly longer to implement for larger changes, or in larger environments where there are more tests or more templating.

Sometimes it is a problem that people just forget to do one of the steps, but, since the new host wont have a DNS name, it will only be able to reference them by IP address, so usually this problem is quickly remedied.

A larger problem is that people can type things incorrectly, and while the validation tests find some problems, they will not find correctly formatted zone or configuration files, which have incorrect data in them.

If a line that used to exist was removed, then immediately afterward reloading services that referred to that previously-existing DNS name will start to fail, as the name no longer exists or resolves.

These problems are usually caught quickly, as things will fail and alert, if monitoring is set up properly, but there was just an outage, and revenue may have been lost, or other negative consequences for an organization.

Humans making manual entry mistakes are simply unavoidable.  As the population of humans doing manual work increases, and the amount of work each human does increases, so will the amount of failures.  This is compounded with any special conditions, where there is a standard process, but special cases exist which must be manually maintained either without automated testing, or with insufficient testing.

Some failures only show up when multiple mistakes occur, so the original set-up problem may have been occurring for days, weeks or months before, but the secondary mistake triggers the initial mistake, making it harder to troubleshoot as the recent change doesn't seem to impact the part that is now broken (but did).

The "delayed failure" may not have even been a mistake at all, and after reverting that change and inspecting the configuration, it might be found that it looks correct, so it is put back in, and the failure occurs again because the error requires two places to cause the failure.

This is a component of Alignment, which I mentioned in the beginning of the book, but we haven't referenced in a while.

The Alignment in question for our original "DNS zone entry is removed" is this:

- A service, say a web server, references a database by DNS name, and is live and working

- A person makes a change to the Zone file, removing the database name, but leaving the zone file in a valid state in terms of validation

- The zone file is loaded and replicated, and the web server cannot reach the database.  An outage has begun.

What was the Alignment here?

The Alignment was that the web server required the DNS server to have the name of the database server, so that it could make a connection to it.  This is 1 layer of Alignment, as the web server needed the DNS server (the requirement) to contact the DB server (the goal).

This is a very simple case of Alignment, but it makes the point for an initial example, which is that without Alignment, things either do not work, or do not work efficiently.  In the above case, things stopped working.

Efficiency is a metric that has to do with "functioning, but not as well as we would like, or could be", and so is a more complex topic than something that does not function, which is fairly clear cut.

We'll be getting very deep into the Alignment of efficiency soon.
