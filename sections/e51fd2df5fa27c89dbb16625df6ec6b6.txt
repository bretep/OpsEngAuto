### [[2.6.7: Data Source]]

Since we'll be talking about Data quite a bit, I will be referring to any mechanism that stores Data as a "Data Source".

This could be a database, a YAML file, a variable in a JavaScript web page that came from a JSON RPC request, it doesn't matter.  There is a location that stores data, and we interact with it to get data and store the data.

The Data Source may be persistent, or it may be temporary (such as Javascript data in a web page).  It may be transactionally safe, or unsafe to update simultaneously.  These are secondary properties, as the primary property of a Data Source is access to the data.

Some qualities of a Data Source:

- Access to data.  Get it, set it.  This is mandatory, all others are optional.

- Constraints on the structure of the data (such as not being able to insert arbitrary fields).  This would be a strict "schema" (schematic), as opposed to a "document" style which allows any type of modifications in the values of a record.

- Constraints on the value of the data that is put into specific fields in the data.  For instance, in a relational database a field in table may be of type "integer" and will not allow alphabet characters, special characters, or real numbers (decimal precision) to be inserted.

- Persistence: So that the data is saved, and if the power is turned off to the system storing the data, when the machine restarts the data will still be available.  There may be corruption here, unless the Data Source also offers a Consistency guarantee.  Persistence simply means that things can be discontinuous (losing power is one method to lose continuity of the service), but the data will still exist.

- Consistency: Ensures that the data does not become corrupted in any failure situations.  These situations might be the program being terminated un-cleanly, and it might use something like a journal to keep track of previous changes, and will replay this journal to ensure that recently changed data is the same as in the journal.  

To be safe, the journal is written to and flushed to disk before the "changes are made" in the database, so if anything the internal database data is consistent with the previous changes, and only new journal entries need to be applied.

There are different Consistency guarantees, and while Consistency means "will not become corrupted", there are usually many methods with which data could become corrupted, but the Consistency provisions attempt to solve those problems through various Logical steps.

- Transactions: Multiple changes, such as in different tables, or multiple rows in the same table, can be applied all-at-once, in an "atomic" fashion, which means that it "cannot be split further" (Atomicity), and being the smallest-type-of-action, it is guaranteed to either not-have-started, or finished completely, before another action takes place.  

Transactional changes are made sequentially, and cannot interrupt each other.  Furthermore they verify the consistency of the entire exchange, and not simply each statement, which allows more precise validation of referential integrity as well as being able to make changes that would be constraint violations if done one-at-a-time, but which are consistent when done together in a transaction.

- Replication: This allows copies to be made of the data to at least 1 other instance of the Data Source implementation, for example a SQL server could incrementally copy it's journal file from itself to another machine, which then applies the journal.  If the original machine goes down, the replication target machine will have an update-to-date version of the database, up to the latest journal entry it received.

There are many other properties to Data Sources, so this is not meant to be an exhaustive list, but a brief coverage of some elements we can associate with the label Data Source, which may or may not exist in a given implementation you may use.

Some Data Source implementations offer features that are in opposition to some of the above, and those feature sets are also useful, since they provide different benefits and weaknesses to some of the features I have mentioned.  The right tool for every job, and all that.

{{ todo__make_more_of_these_qualities_lists_for_other_terms_and_things }}

