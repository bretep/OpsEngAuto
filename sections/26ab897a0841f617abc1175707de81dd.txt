### [[3.5.1: There is no best, except for a certain set of values and priorities, from a limited set of options.]]

Best is a concept that is poorly understood in our culture.  It is frequently used, but rarely clarified, because it's vagueness gives it rhetorical power, but in engineering this is simply a logical fallacy that leads us to poor choices and low efficiency.

In order to take a term like "best" and use it in a manner that allows us to make good choices and have high efficiency, we must understand what other properties "best" has, besides just being "the best".

What are some properties of "best"?

- There is only one of them.  Only 1 thing can be "the best".

- Something cannot be "the best" for a great number of circumstances, because as the circumstances (variables) change, then what is "best" will also change.

- This creates an inverse ratio between the numbers of circumstances a methodology can be applied in, and the efficiency of the results for those circumstances.  This can be extended by allowing for any given set of circumstances (variables) to be repeated over and over.  The repetition will cause some of the variables to fluctuate (time itself being in constant fluctuation, others being contextual yet still being classified as being processed in the "same general manner").

- The inverse ratio suggests that for any given circumstance, there is one-and-only-one "best" answer, and potentially a small set of "close-enough-in-quantitative-results" class of answers that competes with the local-maximum of the "best" answer.

- Changing any of the requirements, resources or goals significantly will almost assuredly change which given solution is the "best" answer to the new problem.

This set of properties took it's shape through a line-of-reasoning, instead of enumerating things that were visible without reasoning, but both methods of defining properties are acceptable (simply remember how you came to them, in case they need re-evaluation).

In engineering we are not generally interested in the "worst" outcome as a result, but we need to brainstorm in finding potential problems to pre-solve against in coming up with our failure matrix for our services/etc.

Determining "worst" solutions is using the methodologies for "best" in reverse quantities.

In my view, this makes it clear that best/worst are a very small subset of options, and those options are highly detailed to one's exact environment, requirement, resources and goals.

As such, there can be no such thing as "Best Practices" (see section {{ section__e5829271e6cfb5927f3a4d4aec1b10df }} for details), because these are generalized solutions, for generalized environments, generalized resources available, and generalized goals.

"Best Practices" are useful to read as case-studies that someone is claiming a method worked well for them, and they can recommend it as a potentially useful method, but since this goes against our own understanding of what "best" really means, these should be reworded as "An Example Implementation", not a "Best Practice", as it is neither Best nor a Practice, since Practice connotes 