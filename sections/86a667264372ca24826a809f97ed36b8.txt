### [[3.10.1.3: Algorithms: Idempotency, Sequence,]]

There are lots of important Algorithms in Engineering, they are Virtual and are frequently constrained to these types of things:

- Searching for data: Finding things based on some matching criteria
- Sorting data: Ordering data based on some sorting criteria
- Coordination: Locking, reference counting, signaling other coordination style actions
- Encoding/Decoding: Encryption, compression, encapsulation, and other wrap/unwrap style actions

There are other categories as well, but these are often what we think of in Operational Engineering when someone says "algorithms".

There are many good references for these, including Wikipedia or Donald Knuth's books, for a completely in-depth comparison between an encyclopedia of algorithms.

In terms of Operations, while we use these other algorithms, I will focusing on "Algorithmic Properties" and very fundamental Algorithms.

One important "Algorithmic Property" is Idempotency.  This means that when you apply an Algorithm with this Property that the result is always the same.  In simple mathematics this can be seen by "1 * 1 = 1".  "* 1" is the Algorithm, and the result is always the same as the same as the original value (1 == 1).

This has interesting mathematical uses, but in Operational Engineering, the use is that if we perform a function, we always have the same result.

Consider a Algorithm that ensures that a directory exits with a given set of permissions.

Let's say that this will be the input data for this Algorithm, in YAML format:

{{{ code_begin }}}
type: ensure_directory_exists
path: /Users/ghowland/projects/OpsEngAuto/sections
mode: 755
user: ghowland
group: staff
{{{ code_end }}}

When the function that executes this Algorithm runs against this data it will ensure that a directory like this is created, if it doesn't exist:

{{{ code_begin }}}
$ ls -ld sections
drwxr-xr-x  346 ghowland  staff  11764 Aug 23 00:48 sections
{{{ code_end }}}

If the directory does exist, then it ensures that the mode, user and group are correct.

At the end of the function running, we always have this directory, with the correct mode, user and group permissions.

This is a basic example of what Idempotency can mean in a Operational Engineering environment.  This property can be used in many places to ensure that we always get a single result, without conditional changes.  It either works, and we get what we expect, or it fails and we know there is a problem (such as lack of permissions to make the changes).  These are both desirable states, because both success and failure meet the Idempotent criteria we set forth.

In comparison to an Algorithmic Property is an Algorithm, such as "Iterating Over a Sequence".

We could combine the previous example with this, to create Logic that will ensure a number of directories exist.

For example, consider this YAML data that lists YAML paths for our above ensure_directory_exists function:

{{{ code_begin }}}
ensure_directory_exists:
  - /Users/ghowland/projects/idempotent/dirs/OpsEngAuto_sections.yaml
  - /Users/ghowland/projects/idempotent/dirs/OpsEngAuto_toc_backups.yaml
  - /Users/ghowland/projects/idempotent/dirs/something_else.yaml
{{{ code_end }}}

If we wrote some Python like this, we can iterate (go over each item in the list) like this:

{{{ code_begin }}}
directory_data = LoadYaml('/path/to/ensure_directory_exists.yaml')
paths = directory_data['ensure_directory_exists']
for path in paths:
  dir_data = LoadYaml(path)
  EnsureDirectoryExistsIdempotentFunction(dir_data)
{{{ code_end }}}

This code assumes a LoadYaml() and EnsureDirectoryExistsIdempotentFunction() exist for convenience, and do what they say they do.  This will iterate over our list of YAML files that contain our directory data, to Idempotently ensure exist.

Over the course of the coming chapters we will introduce many Algorithmic Properties which give us good results in Operations, and we will compare when to use them, and how to use them efficiently.
