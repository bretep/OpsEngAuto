### [[3.10.1.2: Modeling.  Creating models to understand.  Creating models to control.  Not the same.]]

To create a Model of something, is to try to "map" it some way.  Models can be made in any way you can think of, but typical models are things like:

- Data Schemas: such as in a relational database.
- Graphs: nodes and edges which define a sort of topology.
- Flow Charts, State Machines, Entity Relationship Maps, and other process diagrams.

Each type of Model is meant to provide the ability to simulate something, such as your Operational Environment.  

If you were to Model your Operational Environment with each method you could, some of the data would overlap between model-types, and some of the data would be unique per model-type.

Out all of these, the most fundamental type of modeling is the Data Schema model, and the Relational data schema model is the most comprehensive way to model this data.

This is because all data can be describes as collections of fields (tables), with relationships between them (inter-table field constraints).  Graphs, flow charts, and all other types of models can be described textually through a schema, and these schemas can be put into databases such as MySQL, PostgreSQL, Oracle, sqlite, etc.

Once a relational schema is created, for the clearest expression of the schema, then the schema can be "de-normalized" and otherwise "un-spun" so that it can fit into non-relational databases, such as column-oriented or time series databases.  These databases have advantages for some access patterns (such as mostly-inserting data), but their schema is less expressive due to this optimization, so it is best to first understand it's model through a relational schema.

Relational schemas can also be written as programming language "structs", or data primitives, and extended into Classes (Object Oriented style "structs")

