### [[3.10.1.2: Modeling.  Creating models to understand.  Creating models to control.  Not the same.]]

To create a Model of something, is to try to "map" it some way.  Models can be made in any way you can think of, but typical models are things like:

- Data Schemas: such as in a relational database.
- Graphs: nodes and edges which define a sort of topology.
- Flow Charts, State Machines, Entity Relationship Maps, and other process diagrams.

Each type of Model is meant to provide the ability to simulate something, such as your Operational Environment.  

If you were to Model your Operational Environment with each method you could, some of the data would overlap between model-types, and some of the data would be unique per model-type.

Out all of these, the most fundamental type of modeling is the Data Schema model, and the Relational data schema model is the most comprehensive way to model this data.

This is because all data can be describes as collections of fields (tables), with relationships between them (inter-table field constraints).  Graphs, flow charts, and all other types of models can be described textually through a schema, and these schemas can be put into databases such as MySQL, PostgreSQL, Oracle, sqlite, etc.

Once a relational schema is created, for the clearest expression of the schema, then the schema can be "de-normalized" and otherwise "un-spun" so that it can fit into non-relational databases, such as column-oriented or time series databases.  These databases have advantages for some access patterns (such as mostly-inserting data), but their schema is less expressive due to this optimization, so it is best to first understand it's model through a relational schema.

Relational schemas can also be written as programming language "structs", or data primitives, and extended into Classes (Object Oriented style "structs").  This may seem like looking at things in a skewed way, but you can look at these data structures from any direction to get a better understanding of them.

There are two primary reasons to create Models:

- Creating Models to better understand a topic.
- Creating Models to control a set of resources.

Models made for learning are about providing insight, and different ways of looking at data, and are beyond being documentation are generally disposable, ephemeral, and prone to becoming out of date.

For a given Environment, a Model can provide understanding, through creating a summary of the system trying to be understood.  A model like this can be given variables and used to calculate probabilities, and perform analysis to aide in making decisions.

This is a very different thing from a Model that is created in order to control resources.

A Model created to control resources will share many things with Models made for understanding, in that it is also a summary of the system, but unlike a Model for understanding, a Model for control is built to last potentially for the lifetime of the resources and beyond.

Models for control are intended to make operating an Environment 